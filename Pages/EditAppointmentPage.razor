@using System.Reactive.Concurrency
@using SeraBarber.BusinessObjects
@using SeraBarber.Services
@using Radzen
@using Radzen.Blazor
@inject Radzen.DialogService DialogService
@using MudBlazor
@using ButtonType = Radzen.ButtonType
@using Variant = MudBlazor.Variant
@inject  SupabaseService SupabaseService
@inject  Radzen.NotificationService NotificationService
<RadzenTemplateForm TItem="Appointment" Data="@model" Submit=@OnSubmit>
    <RadzenStack Gap="1rem">
        <MudStack>
            <MudTextField T="string" Label="Όνομα Χρήστη" Value="@model.Username" ReadOnly="true"/>
            <MudTextField T="string" Label="Email" Value="@model.Email" ReadOnly="true"/>
            <MudTextField T="string" Label="Αριθμός τηλεφώνου" Value="@model.PhoneNumber" ReadOnly="true"/>

            <!-- Day picker -->
            <MudDatePicker Date="@model.Day.ToDateTime(TimeOnly.MinValue)"
                           DateChanged="@(v => model.Day = DateOnly.FromDateTime(v ?? DateTime.Today))"
                           PickerVariant="PickerVariant.Inline"
                           Color="Color.Primary"
                           Rounded="true"
                           MinDate="DateTime.Today"
                           Variant="Variant.Outlined"
                           ReadOnly="false"
            />


            <!-- Time picker -->
            <MudTimePicker Time="model.Time"
                           TimeChanged="@(v => model.Time = v ?? TimeSpan.Zero)"
                           PickerVariant="PickerVariant.Inline"
                           Color="Color.Primary"
                           Rounded="true"
                           Variant="Variant.Outlined"
                           ReadOnly="false"
                           MinuteSelectionStep="30"/>
            @if (_isAdmin)
            {
                <MudTextField @bind-Value="model.Description"
                              Label="Σημειώσεις"
                              Clearable="true"
                              ReadOnly="false"/>
            }
        </MudStack>
        @if (true)
        {
            <MudStack>
                <RadzenButton ButtonType="ButtonType.Submit" Text="Αποθήκευση"/>
                <RadzenButton Click="OnDeleteClicked" Text="Διαγραφή" />
            </MudStack>
        }
    </RadzenStack>
</RadzenTemplateForm>

@code {
    bool HasPassed = false;

    [Parameter]
    public Appointment? Appointment { get; set; }

    Appointment model = new Appointment();
    private bool _isAdmin;
    private bool _isMyAppointment;
    protected override void OnParametersSet()
    {
        if (Appointment != null)
        {
            HasPassed = SupabaseService.DateTimeHasPassed(Appointment.Start);

            model.Id = Appointment.Id;
            model.UserId = Appointment.UserId;
            model.Username = Appointment.Username;
            model.Email = Appointment.Email;
            model.PhoneNumber = Appointment.PhoneNumber;
            model.Day = Appointment.Day;
            model.Time = Appointment.Time;
            model.Description = Appointment.Description;
            model.CreatedAt = Appointment.CreatedAt; 
            var currentUser = SupabaseService.GetCurrentUser();
            _isMyAppointment = currentUser?.Email != null && currentUser.Email == model.Email;
        }
        else
        {
            DialogService.Close();
        }    
    }

    protected override async Task OnInitializedAsync()
    {
        await SupabaseService.InitializeAsync();
        _isAdmin = SupabaseService.IsAdminUser() ?? false;
        await base.OnInitializedAsync();
    }

    async Task OnSubmit(Appointment model)
    {
        // Make sure UpdateAppointmentAsync handles Day + Time
        await SupabaseService.UpdateAppointmentAsync(model);

        DialogService.Close(model);
        StateHasChanged();
    }

    private async Task OnDeleteClicked()
    {
        bool? confirmed = await DialogService.Confirm("Θέλετε να διαγράψετε το ραντεβού;", "Επιβεβαίωση");
        if (confirmed != true) return;

        var (success,errorMsg) = await SupabaseService.DeleteAppointmentAsync(model.Id);

        if (success)
        {
            DialogService.Close(model);
            StateHasChanged();
        }
        else
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Σφάλμα",
                Detail = errorMsg ?? "Σφάλμα κατά τη διαγραφή του ραντεβού",
                Duration = 4000
            });
        }
    }


}
