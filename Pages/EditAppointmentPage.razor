@using System.Reactive
@using System.Reactive.Concurrency
@using SeraBarber.BusinessObjects
@using SeraBarber.Services
@using Radzen
@using Radzen.Blazor
@inject Radzen.DialogService DialogService
@using MudBlazor
@using ButtonType = Radzen.ButtonType
@using Variant = MudBlazor.Variant
@inject  SupabaseService SupabaseService
@inject  Radzen.NotificationService NotificationService
<RadzenTemplateForm TItem="Appointment" Data="@model" Submit=@OnSubmit>
    <RadzenStack Gap="1rem">
        @if (!_initialized)
        {
            <div style="display:flex; flex-direction:column; align-items:center; justify-content:center; height:200px;">
                <MudProgressCircular Indeterminate="true" Size="Size.Medium" Color="Color.Primary" />
                <p>Φόρτωση...</p>
            </div>
        }
        else
        {
            <MudStack>
                <MudTextField T="string" Label="Όνομα Χρήστη" Value="@model.Username" ReadOnly="true"/>
                @if (_isAdmin || _isMyAppointment)
                {
                    <MudTextField T="string" Label="Email" Value="@model.Email" ReadOnly="true"/>
                    <MudTextField T="string" Label="Αριθμός τηλεφώνου" Value="@model.PhoneNumber" ReadOnly="true"/>
                }
                <!-- Day picker -->
                <MudDatePicker Date="@model.Day.ToDateTime(TimeOnly.MinValue)"
                               DateChanged="@(v => model.Day = DateOnly.FromDateTime(v ?? DateTime.Today))"
                               PickerVariant="PickerVariant.Inline"
                               Color="Color.Primary"
                               Rounded="true"
                               MinDate="DateTime.Today"
                               Variant="Variant.Outlined"
                               Label="Ημερομηνία"
                               ReadOnly="!_isMyAppointment  && !_isAdmin"/>


                <!-- Time picker -->
                <MudTimePicker Time="model.Time"
                               TimeChanged="@(v => model.Time = v ?? TimeSpan.Zero)"
                               PickerVariant="PickerVariant.Inline"
                               Color="Color.Primary"
                               Rounded="true"
                               Variant="Variant.Outlined"
                               ReadOnly="!_isMyAppointment && !_isAdmin"
                               Label="Ώρα"
                               MinuteSelectionStep="30"/>
                @if (_isAdmin || _isMyAppointment)
                {
                    <MudTextField @bind-Value="model.Description"
                                  Label="Σημειώσεις"
                                  Clearable="true"
                                  ReadOnly="!_isMyAppointment"/>
                }
            </MudStack>
            @if (_isAdmin || _isMyAppointment)
            {
                <MudStack>
                    <RadzenButton ButtonType="ButtonType.Submit" Text="Αποθήκευση" ButtonStyle="ButtonStyle.Success"/>
                    <RadzenButton Click="OnDeleteClicked" Text="Διαγραφή" ButtonStyle="ButtonStyle.Danger"/>
                </MudStack>
            }
        }
    </RadzenStack>
</RadzenTemplateForm>


@code {
    bool HasPassed = false;

    [Parameter]
    public Appointment? Appointment { get; set; }
    [Parameter]
    public bool _isMyAppointment { get; set; }
    Appointment model = new Appointment();
    private bool _isAdmin;
    private bool _initialized = false;
    protected override void OnParametersSet()
    {
        if (Appointment != null)
        {
            HasPassed = SupabaseService.DateTimeHasPassed(Appointment.Start);
            _isAdmin = SupabaseService.IsAdminUser() ?? false;
            model.Id = Appointment.Id;
            model.UserId = Appointment.UserId;
            model.Username = Appointment.Username;
            model.Email = Appointment.Email;
            model.PhoneNumber = Appointment.PhoneNumber;
            model.Day = Appointment.Day;
            model.Time = Appointment.Time;
            model.Description = Appointment.Description;
            model.CreatedAt = Appointment.CreatedAt;
            _initialized = true;
        }
        else
        {
            DialogService.Close();
        }   
    }

    protected override async Task OnInitializedAsync()
    {
        await SupabaseService.InitializeAsync();
        await base.OnInitializedAsync();
    }

    async Task OnSubmit(Appointment model)
    {
        var (appointment,errorMsg) = await SupabaseService.UpdateAppointmentAsync(model);
        if (appointment == null)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Σφάλμα",
                Detail = errorMsg ?? "Σφάλμα κατά τη επεξεργασία του ραντεβού",
                Duration = 4000
            });
            DialogService.Close(false);
        }
        else
            DialogService.Close(model);
    }

    private async Task OnDeleteClicked()
    {
        var confirmOptions = new ConfirmOptions()
        {
            CancelButtonText = "Ακύρωση",
        };
        bool? confirmed = await DialogService.Confirm("Θέλετε να διαγράψετε το ραντεβού;", "Επιβεβαίωση",confirmOptions);
        if (confirmed != true) return;

        var (success,errorMsg) = await SupabaseService.DeleteAppointmentAsync(Appointment.Id);

        if(!success){
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Σφάλμα",
                Detail = errorMsg ?? "Σφάλμα κατά τη διαγραφή του ραντεβού",
                Duration = 4000
            });
        }
        DialogService.Close(null);
    }
}
