@page "/login"
@using System.ComponentModel.DataAnnotations
@using Blazored.LocalStorage
@using Microsoft.IdentityModel.Tokens
@using Radzen
@using SeraBarber.BusinessObjects
@using SeraBarber.Services
@using Supabase.Gotrue
@inject SupabaseService SupabaseService
@inject NavigationManager NavManager
@inject ILocalStorageService LocalStorage
@inject NotificationService NotificationService
@inject IJSRuntime JsRuntime
@inject DialogService DialogService
@if (!IsLoading)
{
    <div class="login-container">
        <div class="login-box">
            <img src="logo.jpeg" class="logo" alt="Logo"/>
            <div id="googleSignInButton" data-type="standard" style="display: flex; justify-content: center; margin-top: 20px;"></div>
            <div class="divider">
                <span>ή</span>
            </div>
            <div class="login-form">
                <h3 class="text-center mb-4">Σύνδεση με email</h3>

                <EditForm Model="@model" OnValidSubmit="ProcessLogin">
                    <DataAnnotationsValidator/>
                    <div class="form-group">
                        <label for="email" class="mb-2">Διεύθυνση Email</label>
                        <input @bind="model.Email" id="email" type="email" class="form-control" placeholder="Εισάγετε email εδώ"/>
                        <ValidationMessage For="@(() => model.Email)"/>
                    </div>
                    <div class="form-group">
                        <label for="password" class="mb-2">Κωδικός Πρόσβασης</label>
                        <input @bind="model.Password" id="password" type="password" class="form-control" placeholder="Εισάγετε κωδικό πρόσβασης εδώ"/>
                        <ValidationMessage For="@(() => model.Password)"/>
                    </div>
                    <div class="form-group text-center">
                        <button type="submit" class="btn btn-primary btn-block">Σύνδεση</button>
                    </div>
                </EditForm>
                <div class="form-group text-center mt-5">
                    <a href="/Register" style="color: #0066CC; text-decoration: underline; cursor: pointer;">
                        Δεν έχετε λογαριασμό; Εγγραφείτε εδώ
                    </a>
                </div>

            </div>
        </div>
       
    </div>
}
<style>
    
    /* Login container */
    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
        height: 90vh;
        background-color: transparent;
    }

    /* Login box */
    .login-box {
        max-width: 400px;
        width: 100%;
        padding: 20px;
        border: 2px solid lightgray;
        border-radius: 8px;
        background-color: white;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
    }

    .logo {
        display: block;
        margin: 0 auto;       /* centers horizontally */
        width: 90% ;         /* adjust as needed */
        height: 20vh;         /* maintain aspect ratio */
        max-height: 200px;
    }

    .login-form {
        padding: 0.5rem;
    }

    .form-group {
        margin-top: 20px;
    }

    .btn-block {
        width: 100%;
    }
    .divider {
        display: flex;
        align-items: center;
        text-align: center;
        margin: 30px 0;
        color: #888;
        font-weight: bold;
    }

    .divider::before,
    .divider::after {
        content: '';
        flex: 1;
        height: 1px;
        background: #ccc;
        margin: 0 10px;
    }

    .divider span {
        padding: 0 10px;
        color: #555;
        font-weight: 500;
    }
</style>

@code {
    private Supabase.Gotrue.User? CurrentUser;
    private LoginModel model { get; set; } = new LoginModel();

    bool  IsLoading = true;
    protected override async Task OnInitializedAsync()
    {
        await SupabaseService.InitializeAsync();
       
        
     
        // Check current user
        CurrentUser = SupabaseService.Client.Auth.CurrentUser;

        if (CurrentUser != null)
        {
            // Already logged in → redirect to home
            NavManager.NavigateTo("/", true);
        }

        // Otherwise stay on login page
        IsLoading = false;
    }

    private async Task ProcessLogin()
    {
        var (user,errorMessage) = await SupabaseService.LoginAsync(model.Email, model.Password);
        if (user != null)
        {
            NavManager.NavigateTo("/");
        }
        else
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Σφάλμα",
                Detail = errorMessage,
                Duration = 4000
            });
        }
    }
    private DotNetObjectReference<Login>? objRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Create a reference to this component for JS interop
            objRef = DotNetObjectReference.Create(this);
            await JsRuntime.InvokeVoidAsync("initializeGoogleSignIn", objRef);
        }
    }

    private async Task SignInWithGoogle()
    {
        // This just triggers the Google Sign-In popup via JS
        await JsRuntime.InvokeVoidAsync("triggerGoogleSignIn");
    }

    [JSInvokable]
    public async Task HandleGoogleLogin(string idToken)
    {
        try
        {
            var session = await SupabaseService.Client.Auth.SignInWithIdToken(
                Supabase.Gotrue.Constants.Provider.Google,
                idToken
            );

            if (session != null)
            {
                var user = SupabaseService.Client.Auth.CurrentUser;

                if (user != null)
                {
                    await SupabaseService.CheckForPhoneAsync();
                    
                    
                   
                    if (!user.UserMetadata.ContainsKey("role"))
                    {
                        await SupabaseService.Client.Auth.Update(new UserAttributes()
                        {
                            Data = new Dictionary<string, object>()
                            {
                                { "role", "user" }
                            }
                        });
                    }
                }
                await LocalStorage.SetItemAsStringAsync(
                    "supabase_session",
                    System.Text.Json.JsonSerializer.Serialize(session)
                );
                NavManager.NavigateTo("/", true);
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Σφάλμα Google Login",
                Detail = ex.Message,
                Duration = 4000
            });
        }
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }




    private class LoginModel
    {
        [Required(ErrorMessage = "Υποχρεωτικό πεδίο")]
        public string Email { get; set; }
        [Required(ErrorMessage = "Υποχρεωτικό πεδίο")]
        public string Password { get; set; }
    }
}
