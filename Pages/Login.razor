@page "/login"
@using Blazored.LocalStorage
@using SeraBarber.Services
@inject SupabaseService SupabaseService
@inject NavigationManager NavManager
@inject ILocalStorageService LocalStorage
@if (IsLoading)
{
    <h1>Loading...</h1>
}
else
{
    <div class="login-container">
        <div class="login-box">
            <img src="logo.jpeg" alt="Logo" style="width:375px; height:200px; display:block; margin:0 auto;"/>
            <div class="login-form">
                <h3 class="text-center mb-4">Σύνδεση</h3>

                <EditForm Model="this" OnValidSubmit="ProcessLogin">
                    <div class="form-group">
                        <label for="email" class="mb-2">Διεύθυνση Email</label>
                        <input @bind="Email" id="email" type="email" class="form-control" placeholder="Εισάγετε email εδώ"/>
                    </div>
                    <div class="form-group">
                        <label for="password" class="mb-2">Κωδικός Πρόσβασης</label>
                        <input @bind="Password" id="password" type="password" class="form-control" placeholder="Εισάγετε κωδικό πρόσβασης εδώ"/>
                    </div>
                    <div class="form-group text-center">
                        <button type="submit" class="btn btn-primary btn-block">Σύνδεση</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}
<style>
    
    /* Login container */
    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
        height: 90vh;
        background-color: transparent;
    }

    /* Login box */
    .login-box {
        max-width: 400px;
        width: 100%;
        padding: 20px;
        border: 2px solid lightgray;
        border-radius: 8px;
        background-color: white;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
    }

    .login-logo {
        width: 100px;
        height: 100px;
        margin: auto;
        display: block;
    }

    .login-form {
        padding: 30px 0;
    }

    .form-group {
        margin-top: 20px;
    }

    .btn-block {
        width: 100%;
    }
</style>

@code {
private string Email { get; set; } = string.Empty;
private string Password { get; set; } = string.Empty;
private Supabase.Gotrue.User? CurrentUser;

bool  IsLoading = true;
protected override async Task OnInitializedAsync()
{
    await SupabaseService.InitializeAsync();

    // Try restore session from local storage
    var sessionJson = await LocalStorage.GetItemAsStringAsync("supabase_session");

    if (!string.IsNullOrEmpty(sessionJson))
    {
        try
        {
            var session = System.Text.Json.JsonSerializer.Deserialize<Supabase.Gotrue.Session>(sessionJson);

            if (session != null)
            {
                await SupabaseService.Client.Auth.SetSession(session.AccessToken, session.RefreshToken);
            }
        }
        catch
        {
            Console.WriteLine("Failed to restore session.");
        }
    }

    // Check current user
    CurrentUser = SupabaseService.Client.Auth.CurrentUser;

    if (CurrentUser != null)
    {
        // Already logged in → redirect to home
        NavManager.NavigateTo("/", true);
    }

    // Otherwise stay on login page
    IsLoading = false;
}

private async Task ProcessLogin()
{
    var user = await SupabaseService.LoginAsync(Email, Password);
    if (user != null)
    {
        NavManager.NavigateTo("/");
    }
    else
    {
        Console.WriteLine("Login failed");
    }
    }
}
