@page "/"
@using System.Globalization
@using SeraBarber.Services
@inject SupabaseService SupabaseService
@inject NavigationManager NavManager
@using Blazored.LocalStorage
@inject ILocalStorageService LocalStorage
@using Radzen
@using Radzen.Blazor
@inject Radzen.DialogService DialogService
@using SeraBarber.BusinessObjects
@inject Radzen.NotificationService NotificationService
<p>@CurrentUser?.Email</p>
@if (IsLoading)
{
    <RadzenProgressBar Mode="ProgressBarMode.Indeterminate" Style="width:100%;" />
    <p>Loading...</p>
}
else if (CurrentUser != null)
{
    <div class="scheduler-container">
    <RadzenScheduler @ref=@scheduler
                     SlotRender=@OnSlotRender
                     style="height: 90%;width:80%;"
                     TItem="Appointment"
                     Data=@appointments
                     StartProperty="Start"
                     EndProperty="End"
                     ShowHeader=true
                     TodayText="Σήμερα"
                     TextProperty="Username"
                     SelectedIndex="1"
                     SlotSelect=@OnSlotSelect
                     AppointmentSelect=@OnAppointmentSelect
                     AppointmentRender=@OnAppointmentRender
                     AppointmentMove=@OnAppointmentMove
                     Culture="CultureInfo.CurrentCulture"
                     >
        <RadzenDayView Text="Ημέρα" TimeFormat="HH:mm"/>
        <RadzenWeekView Text="Εβδομάδα" TimeFormat="HH:mm" />
    </RadzenScheduler>
    </div>
    <button class="btn btn-primary mt-5" @onclick="SignOut">Αποσύνδεση</button>
}
else
{
    <p>Redirecting to login...</p>
}


<style>
    .rz-event-content {
        line-height:0.75rem !important;
    }
    .rz-event {
        height:1.25rem !important;
    }
    .rz-scheduler-nav {
        height: 50px;
    }
    .rz-view-header {
        height:30px;
    }
    .scheduler-container {
        
        width: 100%; 
        height: 100vh;
        justify-content: center;
        display: flex;
        padding: 0 5px;
        margin:1rem;
    }
    @@media (max-width: 768px) {
        .scheduler-container {
            height: 100%;
            width: 90%; /* narrower on mobile */
            padding: 0 5px;
        }
    
        .rz-scheduler {
            font-size: 0.85rem; /* slightly smaller text */
        }
    }
</style>

@code {
    RadzenScheduler<Appointment> scheduler;
    private IList<Appointment> appointments;

    private bool IsLoading = true;
    private Supabase.Gotrue.User? CurrentUser;
    private string? JwtToken;
    private int _workStart = 10; // 10:00
    private int _workEnd = 22;   // 22:00


    protected override async Task OnInitializedAsync()
    {
        await SupabaseService.InitializeAsync();

        // Check current user
        CurrentUser = SupabaseService.Client.Auth.CurrentUser;
        if (CurrentUser != null)
        {
            // Fetch appointments
            appointments = await SupabaseService.GetAllAppointmentsAsync();
        }
        else
        {
            NavManager.NavigateTo("/login", true);
        }

        IsLoading = false;
    }

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        if ((SupabaseService.DateTimeHasPassed(args.Start) || 
            SlotTaken(args.Start,args.End))
            && SupabaseService.IsWithinWorkHours(args.Start,_workStart,_workEnd))
        {
            args.Attributes["style"] = "background: rgba(255,0,0,.25);";
            return;
        }
        // Highlight working hours
        if ((args.View.Text == "Ημέρα" || args.View.Text == "Εβδομάδα") && args.Start.Hour >= _workStart && args.Start.Hour < _workEnd)
            args.Attributes["style"] = "background: rgba(0,255,0,.25); !important;";
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        if (args.View.Text != "Year")
        {
            
            if (SupabaseService.DateTimeHasPassed(args.Start)){
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Παρελθοντική Ημερομηνία",
                    Detail = "Αυτή η ημερομηνία είναι στο παρελθόν",
                    Duration = 4000
                });
                return;
            }
            if (!SupabaseService.IsWithinWorkHours(args.Start,_workStart,_workEnd))
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Κλειστό",
                    Detail = "Ο Σέρα ξεκουράζεται αυτή την ώρα",
                    Duration = 4000
                });
                return;
            }
            if (SlotTaken(args.Start, args.End))
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Κατειλημμένο",
                    Detail = "Αυτό το χρονικό διάστημα έχει ήδη ένα ραντεβού.",
                    Duration = 4000,
                });
                return;
            }
            var data = await DialogService.OpenAsync<AddAppointmentPage>("Κλείσε ραντεβού",
                new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } });

            if (data != null)
            {
                appointments.Add(data);
                await scheduler.Reload();
            }
        }
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Appointment> args)
    {
        Appointment copy;
        var isMyAppointment = SupabaseService.IsMyAppointment(args.Data.UserId);
        var isAdmin = SupabaseService.IsAdminUser() == true;
        if (isAdmin || isMyAppointment )
        {
             copy = new Appointment
            {
                Id=args.Data.Id,
                Day = args.Data.Day,
                Time = args.Data.Time,
                Description = args.Data.Description,
                Username = args.Data.Username,
                Email = args.Data.Email,
                PhoneNumber = args.Data.PhoneNumber,
            };
        }
        else
        {
            copy = new Appointment
            {
                Id=args.Data.Id,
                Day = args.Data.Day,
                Time = args.Data.Time,
                Username = args.Data.Username,
            };
        }
        

        var data = await DialogService.OpenAsync<EditAppointmentPage>("Επεξεργασία Ραντεβού",
            new Dictionary<string, object> { { "Appointment", copy } });

        if (data is Appointment)
        {
            //for the ui to update before browser refresh
            args.Data.Day = data.Day;
            args.Data.Time = data.Time;
            args.Data.Description = data.Description;
     
        }
        else if(data is not bool)
        {
            appointments.Remove(args.Data);
        }  
        await scheduler.Reload();
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Appointment> args)
    {
        if (args.Data.Start < DateTime.Today)
            args.Attributes["style"] = "background: red";
    }

    async Task OnAppointmentMove(SchedulerAppointmentMoveEventArgs args)
    {
        bool noAdmin =  SupabaseService.IsAdminUser() is null or false;
        bool datePassed = SupabaseService.DateTimeHasPassed(args.SlotDate);
        bool outsideWorkHours = !SupabaseService.IsWithinWorkHours(args.SlotDate, _workStart, _workEnd);
        bool hasConflict = appointments.Any(x => x.Start == args.SlotDate && x != args.Appointment.Data);

// If any condition fails
        if (noAdmin || datePassed || outsideWorkHours)
        {
            string message = noAdmin ? "Δεν έχετε τα απαιτούμενα δικαιώματα." :
                datePassed ? "Η ημερομηνία έχει ήδη περάσει." :
                "Ο Σέρα ξεκουράζεται αυτή την ώρα";

            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                
                Detail = message,
                Duration = 4000
            });

            return;
        }
        var draggedAppointment = appointments.FirstOrDefault(x => x == args.Appointment.Data);
        if (draggedAppointment != null)
        {
            var duration = draggedAppointment.End - draggedAppointment.Start;
            draggedAppointment.Day = DateOnly.FromDateTime(args.SlotDate);
            draggedAppointment.Time = args.SlotDate.TimeOfDay;
            
            await SupabaseService.UpdateAppointmentAsync(draggedAppointment);
            await scheduler.Reload();
        }

        
    }

    private async Task SignOut()
    {
        try
        {
            await SupabaseService.Client.Auth.SignOut();
            await LocalStorage.RemoveItemAsync("supabase_session");
            NavManager.NavigateTo("/login", true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error signing out: {ex.Message}");
        }
    }

    private bool SlotTaken(DateTime start, DateTime end)
    {
        return appointments.Any(a => (start < a.End) && (end > a.Start));
    }
}
